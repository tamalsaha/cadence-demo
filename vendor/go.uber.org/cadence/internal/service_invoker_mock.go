// Code generated by mockery v2.53.3. DO NOT EDIT.

package internal

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockServiceInvoker is an autogenerated mock type for the ServiceInvoker type
type MockServiceInvoker struct {
	mock.Mock
}

type MockServiceInvoker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceInvoker) EXPECT() *MockServiceInvoker_Expecter {
	return &MockServiceInvoker_Expecter{mock: &_m.Mock}
}

// BackgroundHeartbeat provides a mock function with no fields
func (_m *MockServiceInvoker) BackgroundHeartbeat() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BackgroundHeartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceInvoker_BackgroundHeartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackgroundHeartbeat'
type MockServiceInvoker_BackgroundHeartbeat_Call struct {
	*mock.Call
}

// BackgroundHeartbeat is a helper method to define mock.On call
func (_e *MockServiceInvoker_Expecter) BackgroundHeartbeat() *MockServiceInvoker_BackgroundHeartbeat_Call {
	return &MockServiceInvoker_BackgroundHeartbeat_Call{Call: _e.mock.On("BackgroundHeartbeat")}
}

func (_c *MockServiceInvoker_BackgroundHeartbeat_Call) Run(run func()) *MockServiceInvoker_BackgroundHeartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceInvoker_BackgroundHeartbeat_Call) Return(_a0 error) *MockServiceInvoker_BackgroundHeartbeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceInvoker_BackgroundHeartbeat_Call) RunAndReturn(run func() error) *MockServiceInvoker_BackgroundHeartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// BatchHeartbeat provides a mock function with given fields: details
func (_m *MockServiceInvoker) BatchHeartbeat(details []byte) error {
	ret := _m.Called(details)

	if len(ret) == 0 {
		panic("no return value specified for BatchHeartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceInvoker_BatchHeartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchHeartbeat'
type MockServiceInvoker_BatchHeartbeat_Call struct {
	*mock.Call
}

// BatchHeartbeat is a helper method to define mock.On call
//   - details []byte
func (_e *MockServiceInvoker_Expecter) BatchHeartbeat(details interface{}) *MockServiceInvoker_BatchHeartbeat_Call {
	return &MockServiceInvoker_BatchHeartbeat_Call{Call: _e.mock.On("BatchHeartbeat", details)}
}

func (_c *MockServiceInvoker_BatchHeartbeat_Call) Run(run func(details []byte)) *MockServiceInvoker_BatchHeartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockServiceInvoker_BatchHeartbeat_Call) Return(_a0 error) *MockServiceInvoker_BatchHeartbeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceInvoker_BatchHeartbeat_Call) RunAndReturn(run func([]byte) error) *MockServiceInvoker_BatchHeartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: flushBufferedHeartbeat
func (_m *MockServiceInvoker) Close(flushBufferedHeartbeat bool) {
	_m.Called(flushBufferedHeartbeat)
}

// MockServiceInvoker_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockServiceInvoker_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - flushBufferedHeartbeat bool
func (_e *MockServiceInvoker_Expecter) Close(flushBufferedHeartbeat interface{}) *MockServiceInvoker_Close_Call {
	return &MockServiceInvoker_Close_Call{Call: _e.mock.On("Close", flushBufferedHeartbeat)}
}

func (_c *MockServiceInvoker_Close_Call) Run(run func(flushBufferedHeartbeat bool)) *MockServiceInvoker_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockServiceInvoker_Close_Call) Return() *MockServiceInvoker_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceInvoker_Close_Call) RunAndReturn(run func(bool)) *MockServiceInvoker_Close_Call {
	_c.Run(run)
	return _c
}

// Heartbeat provides a mock function with given fields: details
func (_m *MockServiceInvoker) Heartbeat(details []byte) error {
	ret := _m.Called(details)

	if len(ret) == 0 {
		panic("no return value specified for Heartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceInvoker_Heartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Heartbeat'
type MockServiceInvoker_Heartbeat_Call struct {
	*mock.Call
}

// Heartbeat is a helper method to define mock.On call
//   - details []byte
func (_e *MockServiceInvoker_Expecter) Heartbeat(details interface{}) *MockServiceInvoker_Heartbeat_Call {
	return &MockServiceInvoker_Heartbeat_Call{Call: _e.mock.On("Heartbeat", details)}
}

func (_c *MockServiceInvoker_Heartbeat_Call) Run(run func(details []byte)) *MockServiceInvoker_Heartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockServiceInvoker_Heartbeat_Call) Return(_a0 error) *MockServiceInvoker_Heartbeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceInvoker_Heartbeat_Call) RunAndReturn(run func([]byte) error) *MockServiceInvoker_Heartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// SignalWorkflow provides a mock function with given fields: ctx, domain, workflowID, runID, signalName, signalInput
func (_m *MockServiceInvoker) SignalWorkflow(ctx context.Context, domain string, workflowID string, runID string, signalName string, signalInput []byte) error {
	ret := _m.Called(ctx, domain, workflowID, runID, signalName, signalInput)

	if len(ret) == 0 {
		panic("no return value specified for SignalWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []byte) error); ok {
		r0 = rf(ctx, domain, workflowID, runID, signalName, signalInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceInvoker_SignalWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignalWorkflow'
type MockServiceInvoker_SignalWorkflow_Call struct {
	*mock.Call
}

// SignalWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
//   - workflowID string
//   - runID string
//   - signalName string
//   - signalInput []byte
func (_e *MockServiceInvoker_Expecter) SignalWorkflow(ctx interface{}, domain interface{}, workflowID interface{}, runID interface{}, signalName interface{}, signalInput interface{}) *MockServiceInvoker_SignalWorkflow_Call {
	return &MockServiceInvoker_SignalWorkflow_Call{Call: _e.mock.On("SignalWorkflow", ctx, domain, workflowID, runID, signalName, signalInput)}
}

func (_c *MockServiceInvoker_SignalWorkflow_Call) Run(run func(ctx context.Context, domain string, workflowID string, runID string, signalName string, signalInput []byte)) *MockServiceInvoker_SignalWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]byte))
	})
	return _c
}

func (_c *MockServiceInvoker_SignalWorkflow_Call) Return(_a0 error) *MockServiceInvoker_SignalWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceInvoker_SignalWorkflow_Call) RunAndReturn(run func(context.Context, string, string, string, string, []byte) error) *MockServiceInvoker_SignalWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServiceInvoker creates a new instance of MockServiceInvoker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceInvoker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceInvoker {
	mock := &MockServiceInvoker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
