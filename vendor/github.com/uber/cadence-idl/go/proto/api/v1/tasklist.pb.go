// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/tasklist.proto

package apiv1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskListKind int32

const (
	TaskListKind_TASK_LIST_KIND_INVALID   TaskListKind = 0
	TaskListKind_TASK_LIST_KIND_NORMAL    TaskListKind = 1
	TaskListKind_TASK_LIST_KIND_STICKY    TaskListKind = 2
	TaskListKind_TASK_LIST_KIND_EPHEMERAL TaskListKind = 3
)

var TaskListKind_name = map[int32]string{
	0: "TASK_LIST_KIND_INVALID",
	1: "TASK_LIST_KIND_NORMAL",
	2: "TASK_LIST_KIND_STICKY",
	3: "TASK_LIST_KIND_EPHEMERAL",
}

var TaskListKind_value = map[string]int32{
	"TASK_LIST_KIND_INVALID":   0,
	"TASK_LIST_KIND_NORMAL":    1,
	"TASK_LIST_KIND_STICKY":    2,
	"TASK_LIST_KIND_EPHEMERAL": 3,
}

func (x TaskListKind) String() string {
	return proto.EnumName(TaskListKind_name, int32(x))
}

func (TaskListKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{0}
}

type TaskListType int32

const (
	TaskListType_TASK_LIST_TYPE_INVALID  TaskListType = 0
	TaskListType_TASK_LIST_TYPE_DECISION TaskListType = 1
	TaskListType_TASK_LIST_TYPE_ACTIVITY TaskListType = 2
)

var TaskListType_name = map[int32]string{
	0: "TASK_LIST_TYPE_INVALID",
	1: "TASK_LIST_TYPE_DECISION",
	2: "TASK_LIST_TYPE_ACTIVITY",
}

var TaskListType_value = map[string]int32{
	"TASK_LIST_TYPE_INVALID":  0,
	"TASK_LIST_TYPE_DECISION": 1,
	"TASK_LIST_TYPE_ACTIVITY": 2,
}

func (x TaskListType) String() string {
	return proto.EnumName(TaskListType_name, int32(x))
}

func (TaskListType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{1}
}

type TaskList struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 TaskListKind `protobuf:"varint,2,opt,name=kind,proto3,enum=uber.cadence.api.v1.TaskListKind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TaskList) Reset()         { *m = TaskList{} }
func (m *TaskList) String() string { return proto.CompactTextString(m) }
func (*TaskList) ProtoMessage()    {}
func (*TaskList) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{0}
}
func (m *TaskList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskList.Merge(m, src)
}
func (m *TaskList) XXX_Size() int {
	return m.Size()
}
func (m *TaskList) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskList.DiscardUnknown(m)
}

var xxx_messageInfo_TaskList proto.InternalMessageInfo

func (m *TaskList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskList) GetKind() TaskListKind {
	if m != nil {
		return m.Kind
	}
	return TaskListKind_TASK_LIST_KIND_INVALID
}

type TaskListMetadata struct {
	MaxTasksPerSecond    *types.DoubleValue `protobuf:"bytes,1,opt,name=max_tasks_per_second,json=maxTasksPerSecond,proto3" json:"max_tasks_per_second,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TaskListMetadata) Reset()         { *m = TaskListMetadata{} }
func (m *TaskListMetadata) String() string { return proto.CompactTextString(m) }
func (*TaskListMetadata) ProtoMessage()    {}
func (*TaskListMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{1}
}
func (m *TaskListMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListMetadata.Merge(m, src)
}
func (m *TaskListMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TaskListMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListMetadata proto.InternalMessageInfo

func (m *TaskListMetadata) GetMaxTasksPerSecond() *types.DoubleValue {
	if m != nil {
		return m.MaxTasksPerSecond
	}
	return nil
}

type TaskListPartitionMetadata struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	OwnerHostName        string   `protobuf:"bytes,2,opt,name=owner_host_name,json=ownerHostName,proto3" json:"owner_host_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskListPartitionMetadata) Reset()         { *m = TaskListPartitionMetadata{} }
func (m *TaskListPartitionMetadata) String() string { return proto.CompactTextString(m) }
func (*TaskListPartitionMetadata) ProtoMessage()    {}
func (*TaskListPartitionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{2}
}
func (m *TaskListPartitionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListPartitionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListPartitionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListPartitionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListPartitionMetadata.Merge(m, src)
}
func (m *TaskListPartitionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TaskListPartitionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListPartitionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListPartitionMetadata proto.InternalMessageInfo

func (m *TaskListPartitionMetadata) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TaskListPartitionMetadata) GetOwnerHostName() string {
	if m != nil {
		return m.OwnerHostName
	}
	return ""
}

type IsolationGroupMetrics struct {
	// The rate at which tasks with the given isolation group are being added to this partition
	NewTasksPerSecond float64 `protobuf:"fixed64,1,opt,name=new_tasks_per_second,json=newTasksPerSecond,proto3" json:"new_tasks_per_second,omitempty"`
	// The number of "active" pollers with the given isolation group that the partition is aware of.
	// Pollers typically will reach many partitions
	PollerCount          int64    `protobuf:"varint,2,opt,name=poller_count,json=pollerCount,proto3" json:"poller_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsolationGroupMetrics) Reset()         { *m = IsolationGroupMetrics{} }
func (m *IsolationGroupMetrics) String() string { return proto.CompactTextString(m) }
func (*IsolationGroupMetrics) ProtoMessage()    {}
func (*IsolationGroupMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{3}
}
func (m *IsolationGroupMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsolationGroupMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsolationGroupMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsolationGroupMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsolationGroupMetrics.Merge(m, src)
}
func (m *IsolationGroupMetrics) XXX_Size() int {
	return m.Size()
}
func (m *IsolationGroupMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_IsolationGroupMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_IsolationGroupMetrics proto.InternalMessageInfo

func (m *IsolationGroupMetrics) GetNewTasksPerSecond() float64 {
	if m != nil {
		return m.NewTasksPerSecond
	}
	return 0
}

func (m *IsolationGroupMetrics) GetPollerCount() int64 {
	if m != nil {
		return m.PollerCount
	}
	return 0
}

type TaskListStatus struct {
	BacklogCountHint int64 `protobuf:"varint,1,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	ReadLevel        int64 `protobuf:"varint,2,opt,name=read_level,json=readLevel,proto3" json:"read_level,omitempty"`
	AckLevel         int64 `protobuf:"varint,3,opt,name=ack_level,json=ackLevel,proto3" json:"ack_level,omitempty"`
	// The rate at which tasks may be dispatched according to poller configuration
	RatePerSecond float64      `protobuf:"fixed64,4,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
	TaskIdBlock   *TaskIDBlock `protobuf:"bytes,5,opt,name=task_id_block,json=taskIdBlock,proto3" json:"task_id_block,omitempty"`
	// Mapping of isolation groups to metrics about that group within this partition
	IsolationGroupMetrics map[string]*IsolationGroupMetrics `protobuf:"bytes,6,rep,name=isolation_group_metrics,json=isolationGroupMetrics,proto3" json:"isolation_group_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The rate at which tasks are being added to this partition
	NewTasksPerSecond float64 `protobuf:"fixed64,7,opt,name=new_tasks_per_second,json=newTasksPerSecond,proto3" json:"new_tasks_per_second,omitempty"`
	// Whether the TaskList has any remaining Tasks
	Empty                bool     `protobuf:"varint,8,opt,name=empty,proto3" json:"empty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskListStatus) Reset()         { *m = TaskListStatus{} }
func (m *TaskListStatus) String() string { return proto.CompactTextString(m) }
func (*TaskListStatus) ProtoMessage()    {}
func (*TaskListStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{4}
}
func (m *TaskListStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListStatus.Merge(m, src)
}
func (m *TaskListStatus) XXX_Size() int {
	return m.Size()
}
func (m *TaskListStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListStatus proto.InternalMessageInfo

func (m *TaskListStatus) GetBacklogCountHint() int64 {
	if m != nil {
		return m.BacklogCountHint
	}
	return 0
}

func (m *TaskListStatus) GetReadLevel() int64 {
	if m != nil {
		return m.ReadLevel
	}
	return 0
}

func (m *TaskListStatus) GetAckLevel() int64 {
	if m != nil {
		return m.AckLevel
	}
	return 0
}

func (m *TaskListStatus) GetRatePerSecond() float64 {
	if m != nil {
		return m.RatePerSecond
	}
	return 0
}

func (m *TaskListStatus) GetTaskIdBlock() *TaskIDBlock {
	if m != nil {
		return m.TaskIdBlock
	}
	return nil
}

func (m *TaskListStatus) GetIsolationGroupMetrics() map[string]*IsolationGroupMetrics {
	if m != nil {
		return m.IsolationGroupMetrics
	}
	return nil
}

func (m *TaskListStatus) GetNewTasksPerSecond() float64 {
	if m != nil {
		return m.NewTasksPerSecond
	}
	return 0
}

func (m *TaskListStatus) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

type TaskIDBlock struct {
	StartId              int64    `protobuf:"varint,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	EndId                int64    `protobuf:"varint,2,opt,name=end_id,json=endId,proto3" json:"end_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskIDBlock) Reset()         { *m = TaskIDBlock{} }
func (m *TaskIDBlock) String() string { return proto.CompactTextString(m) }
func (*TaskIDBlock) ProtoMessage()    {}
func (*TaskIDBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{5}
}
func (m *TaskIDBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskIDBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskIDBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskIDBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskIDBlock.Merge(m, src)
}
func (m *TaskIDBlock) XXX_Size() int {
	return m.Size()
}
func (m *TaskIDBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskIDBlock.DiscardUnknown(m)
}

var xxx_messageInfo_TaskIDBlock proto.InternalMessageInfo

func (m *TaskIDBlock) GetStartId() int64 {
	if m != nil {
		return m.StartId
	}
	return 0
}

func (m *TaskIDBlock) GetEndId() int64 {
	if m != nil {
		return m.EndId
	}
	return 0
}

type PollerInfo struct {
	LastAccessTime       *types.Timestamp `protobuf:"bytes,1,opt,name=last_access_time,json=lastAccessTime,proto3" json:"last_access_time,omitempty"`
	Identity             string           `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	RatePerSecond        float64          `protobuf:"fixed64,3,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PollerInfo) Reset()         { *m = PollerInfo{} }
func (m *PollerInfo) String() string { return proto.CompactTextString(m) }
func (*PollerInfo) ProtoMessage()    {}
func (*PollerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{6}
}
func (m *PollerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollerInfo.Merge(m, src)
}
func (m *PollerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PollerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PollerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PollerInfo proto.InternalMessageInfo

func (m *PollerInfo) GetLastAccessTime() *types.Timestamp {
	if m != nil {
		return m.LastAccessTime
	}
	return nil
}

func (m *PollerInfo) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PollerInfo) GetRatePerSecond() float64 {
	if m != nil {
		return m.RatePerSecond
	}
	return 0
}

type StickyExecutionAttributes struct {
	WorkerTaskList         *TaskList       `protobuf:"bytes,1,opt,name=worker_task_list,json=workerTaskList,proto3" json:"worker_task_list,omitempty"`
	ScheduleToStartTimeout *types.Duration `protobuf:"bytes,2,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}        `json:"-"`
	XXX_unrecognized       []byte          `json:"-"`
	XXX_sizecache          int32           `json:"-"`
}

func (m *StickyExecutionAttributes) Reset()         { *m = StickyExecutionAttributes{} }
func (m *StickyExecutionAttributes) String() string { return proto.CompactTextString(m) }
func (*StickyExecutionAttributes) ProtoMessage()    {}
func (*StickyExecutionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{7}
}
func (m *StickyExecutionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickyExecutionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickyExecutionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickyExecutionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickyExecutionAttributes.Merge(m, src)
}
func (m *StickyExecutionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StickyExecutionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StickyExecutionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StickyExecutionAttributes proto.InternalMessageInfo

func (m *StickyExecutionAttributes) GetWorkerTaskList() *TaskList {
	if m != nil {
		return m.WorkerTaskList
	}
	return nil
}

func (m *StickyExecutionAttributes) GetScheduleToStartTimeout() *types.Duration {
	if m != nil {
		return m.ScheduleToStartTimeout
	}
	return nil
}

type TaskListPartition struct {
	// The isolation groups that this partition is assigned.
	// Null/empty indicates that the partition should accept all isolation groups.
	IsolationGroups      []string `protobuf:"bytes,1,rep,name=isolation_groups,json=isolationGroups,proto3" json:"isolation_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskListPartition) Reset()         { *m = TaskListPartition{} }
func (m *TaskListPartition) String() string { return proto.CompactTextString(m) }
func (*TaskListPartition) ProtoMessage()    {}
func (*TaskListPartition) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{8}
}
func (m *TaskListPartition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListPartition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListPartition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListPartition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListPartition.Merge(m, src)
}
func (m *TaskListPartition) XXX_Size() int {
	return m.Size()
}
func (m *TaskListPartition) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListPartition.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListPartition proto.InternalMessageInfo

func (m *TaskListPartition) GetIsolationGroups() []string {
	if m != nil {
		return m.IsolationGroups
	}
	return nil
}

type TaskListPartitionConfig struct {
	Version            int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	NumReadPartitions  int32 `protobuf:"varint,2,opt,name=num_read_partitions,json=numReadPartitions,proto3" json:"num_read_partitions,omitempty"`    // Deprecated: Do not use.
	NumWritePartitions int32 `protobuf:"varint,3,opt,name=num_write_partitions,json=numWritePartitions,proto3" json:"num_write_partitions,omitempty"` // Deprecated: Do not use.
	// Mapping of TaskList PartitionIDs to metadata for reading tasks
	ReadPartitions map[int32]*TaskListPartition `protobuf:"bytes,4,rep,name=read_partitions,json=readPartitions,proto3" json:"read_partitions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Mapping of TaskList PartitionIDs to metadata for writing tasks
	WritePartitions      map[int32]*TaskListPartition `protobuf:"bytes,5,rep,name=write_partitions,json=writePartitions,proto3" json:"write_partitions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TaskListPartitionConfig) Reset()         { *m = TaskListPartitionConfig{} }
func (m *TaskListPartitionConfig) String() string { return proto.CompactTextString(m) }
func (*TaskListPartitionConfig) ProtoMessage()    {}
func (*TaskListPartitionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{9}
}
func (m *TaskListPartitionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListPartitionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListPartitionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListPartitionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListPartitionConfig.Merge(m, src)
}
func (m *TaskListPartitionConfig) XXX_Size() int {
	return m.Size()
}
func (m *TaskListPartitionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListPartitionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListPartitionConfig proto.InternalMessageInfo

func (m *TaskListPartitionConfig) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// Deprecated: Do not use.
func (m *TaskListPartitionConfig) GetNumReadPartitions() int32 {
	if m != nil {
		return m.NumReadPartitions
	}
	return 0
}

// Deprecated: Do not use.
func (m *TaskListPartitionConfig) GetNumWritePartitions() int32 {
	if m != nil {
		return m.NumWritePartitions
	}
	return 0
}

func (m *TaskListPartitionConfig) GetReadPartitions() map[int32]*TaskListPartition {
	if m != nil {
		return m.ReadPartitions
	}
	return nil
}

func (m *TaskListPartitionConfig) GetWritePartitions() map[int32]*TaskListPartition {
	if m != nil {
		return m.WritePartitions
	}
	return nil
}

func init() {
	proto.RegisterEnum("uber.cadence.api.v1.TaskListKind", TaskListKind_name, TaskListKind_value)
	proto.RegisterEnum("uber.cadence.api.v1.TaskListType", TaskListType_name, TaskListType_value)
	proto.RegisterType((*TaskList)(nil), "uber.cadence.api.v1.TaskList")
	proto.RegisterType((*TaskListMetadata)(nil), "uber.cadence.api.v1.TaskListMetadata")
	proto.RegisterType((*TaskListPartitionMetadata)(nil), "uber.cadence.api.v1.TaskListPartitionMetadata")
	proto.RegisterType((*IsolationGroupMetrics)(nil), "uber.cadence.api.v1.IsolationGroupMetrics")
	proto.RegisterType((*TaskListStatus)(nil), "uber.cadence.api.v1.TaskListStatus")
	proto.RegisterMapType((map[string]*IsolationGroupMetrics)(nil), "uber.cadence.api.v1.TaskListStatus.IsolationGroupMetricsEntry")
	proto.RegisterType((*TaskIDBlock)(nil), "uber.cadence.api.v1.TaskIDBlock")
	proto.RegisterType((*PollerInfo)(nil), "uber.cadence.api.v1.PollerInfo")
	proto.RegisterType((*StickyExecutionAttributes)(nil), "uber.cadence.api.v1.StickyExecutionAttributes")
	proto.RegisterType((*TaskListPartition)(nil), "uber.cadence.api.v1.TaskListPartition")
	proto.RegisterType((*TaskListPartitionConfig)(nil), "uber.cadence.api.v1.TaskListPartitionConfig")
	proto.RegisterMapType((map[int32]*TaskListPartition)(nil), "uber.cadence.api.v1.TaskListPartitionConfig.ReadPartitionsEntry")
	proto.RegisterMapType((map[int32]*TaskListPartition)(nil), "uber.cadence.api.v1.TaskListPartitionConfig.WritePartitionsEntry")
}

func init() {
	proto.RegisterFile("uber/cadence/api/v1/tasklist.proto", fileDescriptor_216fa006947e00a0)
}

var fileDescriptor_216fa006947e00a0 = []byte{
	// 1088 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0xfd, 0x68, 0x49, 0x89, 0x7c, 0x15, 0xdb, 0xcc, 0xc4, 0x8e, 0x25, 0x25, 0xf1, 0xa7, 0x68,
	0x11, 0xb8, 0x41, 0x4b, 0xc1, 0x6e, 0x0b, 0x14, 0x6d, 0x91, 0x46, 0xb6, 0x84, 0x84, 0xb0, 0xec,
	0x08, 0x14, 0x93, 0x22, 0xdd, 0x10, 0x23, 0x72, 0x22, 0x4f, 0x45, 0x72, 0x08, 0xce, 0x50, 0x8a,
	0x36, 0x7d, 0x8c, 0xee, 0xfa, 0x22, 0x7d, 0x82, 0x6e, 0x0a, 0xf4, 0x11, 0x8a, 0x3c, 0x49, 0x31,
	0x43, 0x4a, 0xd1, 0x0f, 0x13, 0x34, 0x8b, 0xee, 0x34, 0xf7, 0xcc, 0x99, 0x73, 0xff, 0x45, 0x68,
	0x26, 0x43, 0x12, 0xb7, 0x5c, 0xec, 0x91, 0xd0, 0x25, 0x2d, 0x1c, 0xd1, 0xd6, 0xe4, 0xa4, 0x25,
	0x30, 0x1f, 0xfb, 0x94, 0x0b, 0x23, 0x8a, 0x99, 0x60, 0xe8, 0x8e, 0xbc, 0x63, 0x64, 0x77, 0x0c,
	0x1c, 0x51, 0x63, 0x72, 0x52, 0x3f, 0x1a, 0x31, 0x36, 0xf2, 0x49, 0x4b, 0x5d, 0x19, 0x26, 0x6f,
	0x5a, 0x5e, 0x12, 0x63, 0x41, 0x59, 0x98, 0x92, 0xea, 0xff, 0x5f, 0xc7, 0x05, 0x0d, 0x08, 0x17,
	0x38, 0x88, 0xb2, 0x0b, 0x1b, 0x0f, 0x4c, 0x63, 0x1c, 0x45, 0x24, 0xe6, 0x29, 0xde, 0x7c, 0x09,
	0x65, 0x1b, 0xf3, 0x71, 0x8f, 0x72, 0x81, 0x10, 0x14, 0x43, 0x1c, 0x90, 0xaa, 0xd6, 0xd0, 0x8e,
	0xb7, 0x2d, 0xf5, 0x1b, 0x7d, 0x0d, 0xc5, 0x31, 0x0d, 0xbd, 0xea, 0x56, 0x43, 0x3b, 0xde, 0x3d,
	0x7d, 0x68, 0xe4, 0x38, 0x69, 0xcc, 0x1f, 0xb8, 0xa0, 0xa1, 0x67, 0xa9, 0xeb, 0x4d, 0x0c, 0xfa,
	0xdc, 0x7a, 0x49, 0x04, 0xf6, 0xb0, 0xc0, 0xe8, 0x12, 0xf6, 0x03, 0xfc, 0xd6, 0x91, 0x61, 0x73,
	0x27, 0x22, 0xb1, 0xc3, 0x89, 0xcb, 0x42, 0x4f, 0xc9, 0x55, 0x4e, 0xef, 0x1b, 0xa9, 0xa7, 0xc6,
	0xdc, 0x53, 0xa3, 0xc3, 0x92, 0xa1, 0x4f, 0x5e, 0x61, 0x3f, 0x21, 0xd6, 0xed, 0x00, 0xbf, 0x95,
	0x0f, 0xf2, 0x3e, 0x89, 0x07, 0x8a, 0xd6, 0x7c, 0x09, 0xb5, 0xb9, 0x44, 0x1f, 0xc7, 0x82, 0xca,
	0xac, 0x2c, 0xb4, 0x74, 0x28, 0x8c, 0xc9, 0x2c, 0x8b, 0x44, 0xfe, 0x44, 0x8f, 0x60, 0x8f, 0x4d,
	0x43, 0x12, 0x3b, 0xd7, 0x8c, 0x0b, 0x47, 0xc5, 0xb9, 0xa5, 0xd0, 0x1d, 0x65, 0x7e, 0xce, 0xb8,
	0xb8, 0xc2, 0x01, 0x69, 0x8e, 0xe1, 0xc0, 0xe4, 0xcc, 0x57, 0x49, 0x7e, 0x16, 0xb3, 0x24, 0xba,
	0x24, 0x22, 0xa6, 0x2e, 0x47, 0x2d, 0xd8, 0x0f, 0xc9, 0x34, 0xdf, 0x7d, 0xcd, 0xba, 0x1d, 0x92,
	0xe9, 0xaa, 0x83, 0xe8, 0x21, 0xdc, 0x8a, 0x98, 0xef, 0x93, 0xd8, 0x71, 0x59, 0x12, 0x0a, 0x25,
	0x57, 0xb0, 0x2a, 0xa9, 0xed, 0x5c, 0x9a, 0x9a, 0xbf, 0x15, 0x61, 0x77, 0x1e, 0xc4, 0x40, 0x60,
	0x91, 0x70, 0xf4, 0x39, 0xa0, 0x21, 0x76, 0xc7, 0x3e, 0x1b, 0xa5, 0x34, 0xe7, 0x9a, 0x86, 0x42,
	0x89, 0x14, 0x2c, 0x3d, 0x43, 0x14, 0xf9, 0x39, 0x0d, 0x05, 0x7a, 0x00, 0x10, 0x13, 0xec, 0x39,
	0x3e, 0x99, 0x10, 0x3f, 0x53, 0xd8, 0x96, 0x96, 0x9e, 0x34, 0xa0, 0x7b, 0xb0, 0x8d, 0xdd, 0x71,
	0x86, 0x16, 0x14, 0x5a, 0xc6, 0xee, 0x38, 0x05, 0x1f, 0xc1, 0x5e, 0x8c, 0x05, 0x59, 0x8e, 0xa5,
	0xa8, 0x62, 0xd9, 0x91, 0xe6, 0xf7, 0x71, 0x74, 0x60, 0x47, 0x06, 0xed, 0x50, 0xcf, 0x19, 0xfa,
	0xcc, 0x1d, 0x57, 0x4b, 0xaa, 0x60, 0x8d, 0x0f, 0xf6, 0x82, 0xd9, 0x39, 0x93, 0xf7, 0xac, 0x8a,
	0xa4, 0x99, 0x9e, 0x3a, 0xa0, 0x09, 0x1c, 0xd2, 0x79, 0x5e, 0x9d, 0x91, 0x4c, 0xac, 0x13, 0xa4,
	0x99, 0xad, 0xde, 0x68, 0x14, 0x8e, 0x2b, 0xa7, 0x4f, 0x3e, 0xda, 0x5b, 0x69, 0x76, 0x8c, 0xdc,
	0xd2, 0x74, 0x43, 0x11, 0xcf, 0xac, 0x03, 0xfa, 0x49, 0x65, 0xbb, 0xf9, 0xa1, 0xb2, 0xed, 0x43,
	0x89, 0x04, 0x91, 0x98, 0x55, 0xcb, 0x0d, 0xed, 0xb8, 0x6c, 0xa5, 0x87, 0xba, 0x80, 0xfa, 0x87,
	0xb5, 0x73, 0xda, 0xed, 0x29, 0x94, 0x26, 0xb2, 0x73, 0x55, 0x4d, 0x2a, 0xa7, 0x8f, 0x73, 0x83,
	0xcb, 0x7d, 0xd1, 0x4a, 0x89, 0xdf, 0x6e, 0x7d, 0xa3, 0x35, 0x7f, 0x80, 0xca, 0x52, 0x42, 0x51,
	0x0d, 0xca, 0x5c, 0xe0, 0x58, 0x38, 0xd4, 0xcb, 0x3a, 0xe2, 0xa6, 0x3a, 0x9b, 0x1e, 0x3a, 0x80,
	0x1b, 0x24, 0xf4, 0x24, 0x90, 0x36, 0x41, 0x89, 0x84, 0x9e, 0xe9, 0x35, 0x7f, 0xd5, 0x00, 0xfa,
	0xaa, 0xe1, 0xcc, 0xf0, 0x0d, 0x43, 0x1d, 0xd0, 0x7d, 0xcc, 0x85, 0x83, 0x5d, 0x97, 0x70, 0xee,
	0xc8, 0x65, 0x91, 0x8d, 0x5f, 0x7d, 0x63, 0xfc, 0xec, 0xf9, 0x26, 0xb1, 0x76, 0x25, 0xa7, 0xad,
	0x28, 0xd2, 0x88, 0xea, 0x50, 0xa6, 0x1e, 0x09, 0x05, 0x15, 0xb3, 0x6c, 0x86, 0x16, 0xe7, 0xbc,
	0xa6, 0x2a, 0xe4, 0x34, 0x55, 0xf3, 0x77, 0x0d, 0x6a, 0x03, 0x41, 0xdd, 0xf1, 0xac, 0xfb, 0x96,
	0xb8, 0x89, 0x4c, 0x42, 0x5b, 0x88, 0x98, 0x0e, 0x13, 0x41, 0x38, 0x7a, 0x06, 0xfa, 0x94, 0xc5,
	0x63, 0x12, 0xab, 0xba, 0x39, 0x72, 0x4b, 0x66, 0x7e, 0x3e, 0xf8, 0x68, 0x97, 0x58, 0xbb, 0x29,
	0x6d, 0xb1, 0xd2, 0x6c, 0xa8, 0x71, 0xf7, 0x9a, 0x78, 0x89, 0x4f, 0x1c, 0xc1, 0x9c, 0x34, 0x7b,
	0x32, 0x6c, 0x96, 0x88, 0xac, 0x34, 0xb5, 0xcd, 0xc5, 0x93, 0xed, 0x58, 0xeb, 0xee, 0x9c, 0x6b,
	0xb3, 0x81, 0x64, 0xda, 0x29, 0xb1, 0xf9, 0x04, 0x6e, 0x6f, 0xac, 0x1e, 0xf4, 0x19, 0xe8, 0x6b,
	0x0d, 0xce, 0xab, 0x5a, 0xa3, 0x70, 0xbc, 0x6d, 0xed, 0xad, 0x76, 0x26, 0x6f, 0xfe, 0x59, 0x84,
	0xc3, 0x8d, 0x07, 0xce, 0x59, 0xf8, 0x86, 0x8e, 0x50, 0x15, 0x6e, 0x4e, 0x48, 0xcc, 0x29, 0x0b,
	0xe7, 0x25, 0xce, 0x8e, 0xe8, 0x14, 0xee, 0x84, 0x49, 0xe0, 0xa8, 0x79, 0x8f, 0xe6, 0x2c, 0xae,
	0xa2, 0x28, 0x9d, 0x6d, 0x55, 0x65, 0x33, 0x27, 0x81, 0x45, 0xb0, 0xb7, 0x78, 0x92, 0xa3, 0xaf,
	0x60, 0x5f, 0x72, 0xa6, 0x31, 0x95, 0x35, 0x79, 0x4f, 0x2a, 0x2c, 0x48, 0x28, 0x4c, 0x82, 0x1f,
	0x25, 0xbc, 0xc4, 0xa2, 0xb0, 0xb7, 0xae, 0x52, 0x54, 0x33, 0xfa, 0xf4, 0xa3, 0xd9, 0x5f, 0x0b,
	0xc5, 0x58, 0xf5, 0x25, 0x9d, 0xd2, 0xdd, 0x78, 0xd5, 0x41, 0x1f, 0xf4, 0x0d, 0xe7, 0x4a, 0x4a,
	0xab, 0xfd, 0x49, 0x5a, 0x6b, 0x21, 0xa4, 0x62, 0x7b, 0xd3, 0x55, 0x6b, 0x9d, 0xc2, 0x9d, 0x1c,
	0xa7, 0x96, 0xc7, 0xb7, 0x94, 0x8e, 0xef, 0xf7, 0xab, 0xe3, 0xfb, 0xe8, 0xdf, 0xf9, 0xb2, 0x34,
	0xba, 0xf5, 0x9f, 0x61, 0x3f, 0xcf, 0xa7, 0xff, 0x42, 0xeb, 0xf1, 0x2f, 0x70, 0x6b, 0xf9, 0x3f,
	0x18, 0xd5, 0xe1, 0xae, 0xdd, 0x1e, 0x5c, 0x38, 0x3d, 0x73, 0x60, 0x3b, 0x17, 0xe6, 0x55, 0xc7,
	0x31, 0xaf, 0x5e, 0xb5, 0x7b, 0x66, 0x47, 0xff, 0x1f, 0xaa, 0xc1, 0xc1, 0x1a, 0x76, 0xf5, 0xc2,
	0xba, 0x6c, 0xf7, 0x74, 0x2d, 0x07, 0x1a, 0xd8, 0xe6, 0xf9, 0xc5, 0x6b, 0x7d, 0x0b, 0xdd, 0x87,
	0xea, 0x1a, 0xd4, 0xed, 0x3f, 0xef, 0x5e, 0x76, 0xad, 0x76, 0x4f, 0x2f, 0x3c, 0xf6, 0xde, 0xeb,
	0xdb, 0xb3, 0x88, 0xac, 0xea, 0xdb, 0xaf, 0xfb, 0xdd, 0x25, 0xfd, 0x7b, 0x70, 0xb8, 0x86, 0x75,
	0xba, 0xe7, 0xe6, 0xc0, 0x7c, 0x71, 0xa5, 0x6b, 0x39, 0x60, 0xfb, 0xdc, 0x36, 0x5f, 0x99, 0xf6,
	0x6b, 0x7d, 0xeb, 0x8c, 0xfe, 0xf1, 0xee, 0x48, 0xfb, 0xeb, 0xdd, 0x91, 0xf6, 0xf7, 0xbb, 0x23,
	0x0d, 0x0e, 0x5d, 0x16, 0xe4, 0x65, 0xea, 0x6c, 0x67, 0x91, 0x2a, 0x39, 0xcf, 0x7d, 0xed, 0xa7,
	0x93, 0x11, 0x15, 0xd7, 0xc9, 0xd0, 0x70, 0x59, 0xd0, 0x5a, 0xfe, 0x0e, 0xfb, 0x82, 0x7a, 0x7e,
	0x6b, 0xc4, 0xd2, 0x4f, 0xa3, 0xec, 0xa3, 0xec, 0x3b, 0x1c, 0xd1, 0xc9, 0xc9, 0xf0, 0x86, 0xb2,
	0x7d, 0xf9, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xc9, 0xf6, 0x6f, 0xb8, 0x09, 0x00, 0x00,
}

func (m *TaskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Kind != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTasklist(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskListMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxTasksPerSecond != nil {
		{
			size, err := m.MaxTasksPerSecond.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskListPartitionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListPartitionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListPartitionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OwnerHostName) > 0 {
		i -= len(m.OwnerHostName)
		copy(dAtA[i:], m.OwnerHostName)
		i = encodeVarintTasklist(dAtA, i, uint64(len(m.OwnerHostName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTasklist(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsolationGroupMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsolationGroupMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsolationGroupMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PollerCount != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.PollerCount))
		i--
		dAtA[i] = 0x10
	}
	if m.NewTasksPerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NewTasksPerSecond))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *TaskListStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Empty {
		i--
		if m.Empty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.NewTasksPerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NewTasksPerSecond))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.IsolationGroupMetrics) > 0 {
		for k := range m.IsolationGroupMetrics {
			v := m.IsolationGroupMetrics[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTasklist(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTasklist(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTasklist(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TaskIdBlock != nil {
		{
			size, err := m.TaskIdBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RatePerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RatePerSecond))))
		i--
		dAtA[i] = 0x21
	}
	if m.AckLevel != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.AckLevel))
		i--
		dAtA[i] = 0x18
	}
	if m.ReadLevel != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.ReadLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.BacklogCountHint != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.BacklogCountHint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskIDBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskIDBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskIDBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndId != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.EndId))
		i--
		dAtA[i] = 0x10
	}
	if m.StartId != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.StartId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RatePerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RatePerSecond))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintTasklist(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if m.LastAccessTime != nil {
		{
			size, err := m.LastAccessTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StickyExecutionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickyExecutionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickyExecutionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScheduleToStartTimeout != nil {
		{
			size, err := m.ScheduleToStartTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WorkerTaskList != nil {
		{
			size, err := m.WorkerTaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskListPartition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListPartition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListPartition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IsolationGroups) > 0 {
		for iNdEx := len(m.IsolationGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IsolationGroups[iNdEx])
			copy(dAtA[i:], m.IsolationGroups[iNdEx])
			i = encodeVarintTasklist(dAtA, i, uint64(len(m.IsolationGroups[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TaskListPartitionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListPartitionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListPartitionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WritePartitions) > 0 {
		for k := range m.WritePartitions {
			v := m.WritePartitions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTasklist(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTasklist(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTasklist(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ReadPartitions) > 0 {
		for k := range m.ReadPartitions {
			v := m.ReadPartitions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTasklist(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTasklist(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTasklist(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NumWritePartitions != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.NumWritePartitions))
		i--
		dAtA[i] = 0x18
	}
	if m.NumReadPartitions != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.NumReadPartitions))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTasklist(dAtA []byte, offset int, v uint64) int {
	offset -= sovTasklist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTasklist(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovTasklist(uint64(m.Kind))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskListMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTasksPerSecond != nil {
		l = m.MaxTasksPerSecond.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskListPartitionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTasklist(uint64(l))
	}
	l = len(m.OwnerHostName)
	if l > 0 {
		n += 1 + l + sovTasklist(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsolationGroupMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewTasksPerSecond != 0 {
		n += 9
	}
	if m.PollerCount != 0 {
		n += 1 + sovTasklist(uint64(m.PollerCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskListStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BacklogCountHint != 0 {
		n += 1 + sovTasklist(uint64(m.BacklogCountHint))
	}
	if m.ReadLevel != 0 {
		n += 1 + sovTasklist(uint64(m.ReadLevel))
	}
	if m.AckLevel != 0 {
		n += 1 + sovTasklist(uint64(m.AckLevel))
	}
	if m.RatePerSecond != 0 {
		n += 9
	}
	if m.TaskIdBlock != nil {
		l = m.TaskIdBlock.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	if len(m.IsolationGroupMetrics) > 0 {
		for k, v := range m.IsolationGroupMetrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTasklist(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTasklist(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTasklist(uint64(mapEntrySize))
		}
	}
	if m.NewTasksPerSecond != 0 {
		n += 9
	}
	if m.Empty {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskIDBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartId != 0 {
		n += 1 + sovTasklist(uint64(m.StartId))
	}
	if m.EndId != 0 {
		n += 1 + sovTasklist(uint64(m.EndId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastAccessTime != nil {
		l = m.LastAccessTime.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovTasklist(uint64(l))
	}
	if m.RatePerSecond != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StickyExecutionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerTaskList != nil {
		l = m.WorkerTaskList.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	if m.ScheduleToStartTimeout != nil {
		l = m.ScheduleToStartTimeout.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskListPartition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IsolationGroups) > 0 {
		for _, s := range m.IsolationGroups {
			l = len(s)
			n += 1 + l + sovTasklist(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskListPartitionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovTasklist(uint64(m.Version))
	}
	if m.NumReadPartitions != 0 {
		n += 1 + sovTasklist(uint64(m.NumReadPartitions))
	}
	if m.NumWritePartitions != 0 {
		n += 1 + sovTasklist(uint64(m.NumWritePartitions))
	}
	if len(m.ReadPartitions) > 0 {
		for k, v := range m.ReadPartitions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTasklist(uint64(l))
			}
			mapEntrySize := 1 + sovTasklist(uint64(k)) + l
			n += mapEntrySize + 1 + sovTasklist(uint64(mapEntrySize))
		}
	}
	if len(m.WritePartitions) > 0 {
		for k, v := range m.WritePartitions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTasklist(uint64(l))
			}
			mapEntrySize := 1 + sovTasklist(uint64(k)) + l
			n += mapEntrySize + 1 + sovTasklist(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTasklist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTasklist(x uint64) (n int) {
	return sovTasklist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= TaskListKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTasksPerSecond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTasksPerSecond == nil {
				m.MaxTasksPerSecond = &types.DoubleValue{}
			}
			if err := m.MaxTasksPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListPartitionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListPartitionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListPartitionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsolationGroupMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsolationGroupMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsolationGroupMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTasksPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NewTasksPerSecond = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollerCount", wireType)
			}
			m.PollerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollerCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BacklogCountHint", wireType)
			}
			m.BacklogCountHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BacklogCountHint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadLevel", wireType)
			}
			m.ReadLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckLevel", wireType)
			}
			m.AckLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatePerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RatePerSecond = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIdBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskIdBlock == nil {
				m.TaskIdBlock = &TaskIDBlock{}
			}
			if err := m.TaskIdBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolationGroupMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsolationGroupMetrics == nil {
				m.IsolationGroupMetrics = make(map[string]*IsolationGroupMetrics)
			}
			var mapkey string
			var mapvalue *IsolationGroupMetrics
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTasklist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasklist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTasklist
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTasklist
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasklist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTasklist
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTasklist
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &IsolationGroupMetrics{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTasklist(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTasklist
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IsolationGroupMetrics[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTasksPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NewTasksPerSecond = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskIDBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskIDBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskIDBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartId", wireType)
			}
			m.StartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndId", wireType)
			}
			m.EndId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccessTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastAccessTime == nil {
				m.LastAccessTime = &types.Timestamp{}
			}
			if err := m.LastAccessTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatePerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RatePerSecond = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickyExecutionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickyExecutionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickyExecutionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerTaskList == nil {
				m.WorkerTaskList = &TaskList{}
			}
			if err := m.WorkerTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToStartTimeout == nil {
				m.ScheduleToStartTimeout = &types.Duration{}
			}
			if err := m.ScheduleToStartTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListPartition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListPartition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListPartition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolationGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsolationGroups = append(m.IsolationGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListPartitionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListPartitionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListPartitionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumReadPartitions", wireType)
			}
			m.NumReadPartitions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumReadPartitions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumWritePartitions", wireType)
			}
			m.NumWritePartitions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumWritePartitions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPartitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadPartitions == nil {
				m.ReadPartitions = make(map[int32]*TaskListPartition)
			}
			var mapkey int32
			var mapvalue *TaskListPartition
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTasklist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasklist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasklist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTasklist
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTasklist
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TaskListPartition{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTasklist(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTasklist
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReadPartitions[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritePartitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WritePartitions == nil {
				m.WritePartitions = make(map[int32]*TaskListPartition)
			}
			var mapkey int32
			var mapvalue *TaskListPartition
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTasklist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasklist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasklist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTasklist
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTasklist
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TaskListPartition{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTasklist(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTasklist
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WritePartitions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTasklist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTasklist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTasklist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTasklist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTasklist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTasklist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTasklist = fmt.Errorf("proto: unexpected end of group")
)
